Index: freemind/main/XMLElement.java
===================================================================
--- a/freemind/freemind/main/XMLElement.java	（修订版 2510）
+++ b/freemind/freemind/main/XMLElement.java	（工作拷贝）
@@ -2118,7 +2118,8 @@
     {
         try {
             ByteArrayOutputStream out = new ByteArrayOutputStream();
-            OutputStreamWriter writer = new OutputStreamWriter(out);
+            // OSSXP.COM: Encode output to default_charset(UTF-8). 
+            OutputStreamWriter writer = new OutputStreamWriter(out, FreeMind.DEFAULT_CHARSET);
             this.write(writer);
             writer.flush();
             return new String(out.toByteArray());
@@ -2270,7 +2271,8 @@
                     break;
                 default:
                     int unicode = (int) ch;
-                    if ((unicode < 32) || (unicode > 126)) {
+                    // OSSXP.COM: do not convert Chinese characters into &#blahblah;
+                    if (unicode < 32) {
                         writer.write('&'); writer.write('#');
                         writer.write('x');
                         writer.write(Integer.toString(unicode, 16));
Index: freemind/main/FreeMind.java
===================================================================
--- a/freemind/freemind/main/FreeMind.java	（修订版 2512）
+++ b/freemind/freemind/main/FreeMind.java	（工作拷贝）
@@ -84,6 +84,9 @@
 
 	// OSSXP.COM: set oem version.
 	public static final String hackedversion = "(worldhello.net, <REVISION>)";
+ 
+	// OSSXP.COM: set output character set to utf-8.
+	public static final String DEFAULT_CHARSET = "UTF-8";
 
 	private static final String SPLIT_PANE_POSITION = "split_pane_position";
 
Index: freemind/modes/mindmapmode/MindMapMapModel.java
===================================================================
--- a/freemind/freemind/modes/mindmapmode/MindMapMapModel.java	（修订版 2510）
+++ b/freemind/freemind/modes/mindmapmode/MindMapMapModel.java	（工作拷贝）
@@ -251,7 +251,8 @@
         	if(timerForAutomaticSaving != null) {
         		timerForAutomaticSaving.cancel();
         	}
-            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file) ) );
+            // OSSXP.COM: save file using default character set.
+            BufferedWriter fileout = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(file), FreeMind.DEFAULT_CHARSET ) );
             getXml(fileout);
 
             if(!isInternal) {
@@ -278,10 +279,14 @@
 	 * @throws IOException
 	 */
 	private void getXml(Writer fileout, boolean saveInvisible) throws IOException {
+		// OSSXP.COM: write xml declare.
+		fileout.write("<?xml version=\"1.0\" encoding=\"" + FreeMind.DEFAULT_CHARSET + "\"?>\n");
 		fileout.write("<map ");
 		fileout.write("version=\""+FreeMind.XML_VERSION+"\"");
 		fileout.write(">\n");
-		fileout.write("<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->\n");
+		// OSSXP.COM: add notice for this hacked version.
+		fileout.write("<!-- This file is saved using a hacked version of FreeMind. visit: http://www.worldhello.net, http://ossxp.com -->\n");
+		fileout.write("<!-- Orignal FreeMind, can download from http://freemind.sourceforge.net -->\n");
 		getRegistry().save(fileout);
 		(getRootNode()).save(fileout, this.getLinkRegistry(), saveInvisible, true);
 		fileout.write("</map>\n");
@@ -357,7 +362,28 @@
         int versionInfoLength;
 		versionInfoLength = EXPECTED_START_STRINGS[0].length();
         // reading the start of the file:
-        StringBuffer buffer = readFileStart(file, versionInfoLength);
+        // OSSXP.COM: 
+        //     because we add a xml declare, the mm file now begin with "<xml", 
+        //     so direct match mmap version will failed.
+        //     search "<map" and store matched line into buffer.
+        BufferedReader in=null;
+        String buffer = null;
+        try {
+        	// get the file start into the memory:
+        	in = new BufferedReader(new FileReader(file));
+        	while ((buffer = in.readLine()) != null) {
+            // buffer contains line start with "<map", stop matching.
+        		if (buffer.substring(0,4).equals("<map"))
+        		{
+        			break;
+        		}
+        	}
+        	in.close();
+        } catch (Exception e) {
+        	e.printStackTrace();
+        	buffer = "";
+        }
+
         // the resulting file is accessed by the reader:
         Reader reader = null;
         for(int i = 0; i < EXPECTED_START_STRINGS.length; i++){
